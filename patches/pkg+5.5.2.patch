diff --git a/node_modules/pkg/prelude/bootstrap.js b/node_modules/pkg/prelude/bootstrap.js
index 7285b7c..b1f1774 100644
--- a/node_modules/pkg/prelude/bootstrap.js
+++ b/node_modules/pkg/prelude/bootstrap.js
@@ -1859,6 +1859,7 @@ function payloadFileSync(pointer) {
     execFileSync: childProcess.execFileSync,
     exec: childProcess.exec,
     execSync: childProcess.execSync,
+    fork: childProcess.fork,
   };
 
   function setOptsEnv(args) {
@@ -1870,6 +1871,16 @@ function payloadFileSync(pointer) {
     }
     const opts = args[pos];
     if (!opts.env) opts.env = _extend({}, process.env);
+    if (Array.isArray(opts.execArgv)) {
+      // fork: The patched Node.js binary prevents us from passing execArgv on
+      // the cli. Instead we'll pass those options through the environment.
+      // https://nodejs.org/docs/latest/api/cli.html#cli_node_options_options
+      opts.env.NODE_OPTIONS =
+        typeof opts.env.NODE_OPTIONS === 'string'
+          ? `${opts.env.NODE_OPTIONS} ${opts.execArgv.join(' ')}`
+          : opts.execArgv.join(' ');
+      delete opts.execArgv;
+    }
     if (opts.env.PKG_EXECPATH === 'PKG_INVOKE_NODEJS') return;
     opts.env.PKG_EXECPATH = EXECPATH;
   }
@@ -1977,6 +1988,12 @@ function payloadFileSync(pointer) {
     modifyLong(args, 0);
     return ancestor.execSync.apply(childProcess, args);
   };
+
+  childProcess.fork = function fork() {
+    var args = cloneArgs(arguments);
+    setOptsEnv(args);
+    return ancestor.fork.apply(childProcess, args);
+  };
 })();
 
 // /////////////////////////////////////////////////////////////////
@@ -2102,8 +2119,15 @@ function payloadFileSync(pointer) {
         // Example: /tmp/pkg/<hash>/sharp/build/Release/sharp.node
         newPath = path.join(tmpFolder, modulePackagePath, moduleBaseName);
       } else {
-        // simple load the file in the temporary folder
-        newPath = path.join(tmpFolder, moduleBaseName);
+        const tmpModulePath = path.join(tmpFolder, moduleBaseName);
+
+        if (!fs.existsSync(tmpModulePath)) {
+          fs.mkdirSync(path.dirname(tmpModulePath), { recursive: true });
+          copyFileSync(modulePath, tmpModulePath);
+        }
+
+        // load the copied file in the temporary folder
+        newPath = tmpModulePath;
       }
 
       // replace the path with the new module path
